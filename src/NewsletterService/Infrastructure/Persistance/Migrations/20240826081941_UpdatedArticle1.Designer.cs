// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(NewsletterContext))]
    [Migration("20240826081941_UpdatedArticle1")]
    partial class UpdatedArticle1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarkdownContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Sultan Dzjumajev",
                            CreatedDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditedDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MarkdownContent = "When working with distributed systems, there are many factors to consider, including the environment you are operating in, ensuring the relevant configurations are up and running, and maintaining communication between the services and components. One common pitfall in developing a distributed system is not having a smart way to manage all the key-value pair configurations used for service-to-service communication, database connections, and other integrations. This challenge is more severe when you need to differentiate between various environment configurations and maintain each one of them.\r\n\r\nAnother difficulty in working with such systems arises when using different vendors' SDKs to integrate with their resources. This approach often results in a strong coupling to that specific infrastructure within your code, which might not be desirable, particularly when moving between local development environments and staging environments in the cloud.\r\n\r\nThis is where Dapr comes into play, addressing these problems and more.\r\n\r\nDapr is a runtime application designed to be a handy tool for distributed systems, helping achieve quality attributes like resilience, maintainability, and scalability. It accomplishes this by offering \"building blocks,\" each a coherent set of APIs tailored to specific feature.\r\n\r\nDapr is fully supported with the latest .NET and C# with SDK library, and even more the Dapr itself tries to support variety of different programming languages. Dapr is an open source project written in GO language. Also \r\n\r\n## Sidecar Pattern\r\nA significant feature of the Dapr runtime is its implementation of the sidecar pattern. In this pattern, every microservice has its own dedicated sidecar application running alongside it. The core principle here is that your main service contains the essential business logic and features, while cross-cutting concerns are offloaded to its sidecar.\r\n\r\nIn the context of Dapr, these cross-cutting concerns are particularly interesting because by offloading responsibilities to Dapr for communicating with different outbound sources, your microservice is relieved from integrating directly with vendor SDKs. Instead, it interacts with a consistent set of Dapr APIs, independent of the underlying infrastructure.\r\n\r\nEach Dapr sidecar exposes APIs for metadata, health checks, and building blocks. The metadata and health APIs are used for load balancing and discovering the appropriate destinations for communication.\r\n\r\n<figure>\r\n  <img src=\"./sidecars.svg\" alt=\"Cluster with services and sidecars\" width=\"100%\"/>\r\n  <figcaption>Amount of service instances will always match with amount of spawned sidecars in a Kubernetes based cluster</figcaption>\r\n</figure>\r\n\r\n\r\n## Dapr Components\r\nDapr components are pluggable units that provide integration with various external systems and resources. These components enable the system to interact with different resources such as state stores, message brokers, bindings, and observability tools. By leveraging Dapr components, developers can switch between different infrastructure providers without changing application code, enhancing the portability and flexibility of the distributed system.\r\n\r\n<figure>\r\n  <img src=\"./DaprComponent.svg\" alt=\"different components depending on your environment\" width=\"100%\"/>\r\n  <figcaption>The ability to swap between different components depending on your environment for the same building block</figcaption>\r\n</figure>\r\n\r\n\r\nDapr components are declared in YAML configuration files. These declarations specify how Dapr should interact with external resources and define the metadata and configuration details necessary for integration. Components can be used by Dapr's building blocks to perform various operations like state management, publish/subscribe messaging, and resource binding.\r\n\r\nExample Component Declaration\r\nBelow is an example of a YAML file that configures a Redis state store component for use by the Dapr state management building block:\r\n\r\n<pre style=\"font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; \"><span style=\"color: rgb(121, 192, 255); font-weight: 400;\">apiVersion:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">dapr.io/v1alpha1</span>\r\n<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">kind:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">Component</span>\r\n<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">metadata:</span>\r\n  <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">name:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">statestore</span>\r\n  <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">namespace:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">default</span>\r\n<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">spec:</span>\r\n  <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">type:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">state.redis</span>\r\n  <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">version:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">v1</span>\r\n  <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">metadata:</span>\r\n  <span style=\"color: rgb(242, 204, 96); font-weight: 400;\">-</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">name:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">redisHost</span>\r\n    <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">value:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"localhost:6379\"</span>\r\n  <span style=\"color: rgb(242, 204, 96); font-weight: 400;\">-</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">name:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">redisPassword</span>\r\n    <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">value:</span> <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"\"</span></pre>\r\nIn this example, the component is given a name (statestore) and specifies the type (state.redis) and version (v1). The metadata section contains key-value pairs needed to configure the Redis connection.\r\n\r\n\r\n## Dapr Building Blocks\r\n\r\nDapr building blocks are modular APIs that provide essential functionality for building distributed applications. They abstract away the complexities of working with various infrastructure components, allowing developers to focus on business logic. Dapr building blocks utilize Dapr Component declarations to provide various capabilities to your applications. A service depends on building block API and the building block depends on Component declarations that determines it behavior. Summary of building blocks shown below:\r\n\r\n\r\n<figure>\r\n  <img src=\"https://docs.dapr.io/images/building_blocks.png\" alt=\"Dapr Building Blocks\" width=\"100%\"/>\r\n  <figcaption>Dapr Building Blocks <i>Source link: <a href=\"https://docs.dapr.io/images/building_blocks.png\">https://docs.dapr.io/images/building_blocks.png</a></i></figcaption>\r\n</figure>\r\n\r\n## Azure Support\r\n\r\nIn Azure, there is a Kubernetes-based serverless hosting platform called Container Apps, which natively integrates with Dapr. By enabling this feature, the cloud provider manages and provisions the necessary resources for Dapr to operate and allocates the sidecar containers. Both from the Azure portal GUI and with Infrastructure as Code (IaC) tools such as Bicep, you can configure all of the required Dapr settings within this resource platform.\r\n\r\nContainer Apps is a good candidate for deploying your microservices and provides layers of abstraction that make it easier to provision your containers, as the underlying Kubernetes infrastructure is maintained by the cloud provider.\r\n\r\nOne limitation is that any Dapr building block that is either in the Alpha or Beta stage will not be supported in this hosting platform until it reaches a stable stage version.\r\n\r\n<figure>\r\n  <img src=\"https://learn.microsoft.com/en-gb/azure/container-apps/media/microservices-dapr/azure-container-apps-microservices-dapr.png\" alt=\">Dapr Container apps deployed in runtime with Dapr\" width=\"100%\"/>\r\n  <figcaption>Dapr Container apps deployed in runtime with Dapr <i>Source link: <a href=\"https://learn.microsoft.com/en-gb/azure/container-apps/media/microservices-dapr/azure-container-apps-microservices-dapr.png\">https://learn.microsoft.com/en-gb/azure/container-apps/media/microservices-dapr/azure-container-apps-microservices-dapr.png</a></i></figcaption>\r\n</figure>\r\n\r\n## Service-to-Service Invocation\r\nThe service-to-service invocation building block is a fundamental part of Dapr, enabling microservices to communicate with each other efficiently and reliably. This building block abstracts the complexities of service discovery and routing, allowing developers to focus on their business logic without worrying about the network communication or base URL of the service to be invoked.\r\n\r\n* Service Discovery: Dapr automatically handles service discovery, allowing services to locate and communicate with each other without hard-coded addresses.\r\n\r\n* Load Balancing: The Dapr runtime includes load balancing mechanisms, ensuring requests are distributed evenly across service instances.\r\n\r\n* Protocol Agnostic: Supports both HTTP and gRPC, allowing developers to choose the communication protocol that best suits their needs.\r\n\r\n* Security: Dapr supports secure communication between services using mutual TLS, ensuring data privacy and integrity.\r\n\r\nBy using Dapr's service-to-service invocation building block, developers can bridge http/grpc communication without the overhead of managing it.\r\n\r\n\r\n## Example Scenario: ServiceA invocating ServiceB for fetching WeatherForecast\r\n\r\nWe start the dapr sidecars in self-hosted mode, and relative to where the csprojects  are located in the file system, we create two ps.1 scripts which will tell the dapr CLI to start both the dotnet application, sidecar and bind it to services. Pay attention to --resources-path parameter, which tells where the dapr components are stored.\r\n\r\n<pre style=\"font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; \">dapr run <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--app-id</span> serviceA <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--app-port</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">5203</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--resources-path</span> ..\\dapr.components\\ <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--</span> dotnet run\r\n\r\ndapr run <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--app-id</span> serviceB <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--app-port</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">5204</span> <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--resources-path</span> ..\\dapr.components\\ <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">--</span> dotnet run</pre>\r\n\r\nYou need to install nuget package **Dapr.AspNetCore**.\r\n\r\nThis library will provide an extension method to IServiceCollection, you will need to configure Dapr Dependency Injection as following:\r\n\r\n<pre style=\"font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; \">builder.Services.AddDaprClient();\r\n</pre>\r\n\r\nThe code below for ServiceA showcases multiple ways to archieve the same service invocation capability.\r\n\r\n<pre style=\"font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; \"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">using</span> Dapr.Client;\r\n<span style=\"color: rgb(255, 123, 114); font-weight: 400;\">using</span> Microsoft.AspNetCore.Mvc;\r\n\r\n<span style=\"color: rgb(255, 123, 114); font-weight: 400;\">namespace</span> <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">dapr.serviceA</span>;\r\n\r\n[<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">Route(<span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"/\"</span>)</span>]\r\n<span style=\"color: rgb(201, 209, 217); font-weight: 400;\"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">public</span> <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">class</span> <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">ServiceAController</span>(<span style=\"color: rgb(201, 209, 217); font-weight: 400;\">\r\n    DaprClient client</span>) : ControllerBase</span>\r\n{\r\n\r\n    [<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">HttpGet(<span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"/forecast1\"</span>)</span>]\r\n    <span style=\"color: rgb(201, 209, 217); font-weight: 400;\"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">public</span> <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">async</span> <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">Task</span>&lt;<span style=\"color: rgb(210, 168, 255); font-weight: 400;\">IActionResult</span>&gt; <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">GetForecast</span>()</span>\r\n    {\r\n        <span style=\"color: rgb(139, 148, 158); font-weight: 400;\">// Several overloads of InvokeMethodAsync, and ability to strongly bind contracts.</span>\r\n        <span style=\"color: rgb(139, 148, 158); font-weight: 400;\">//Response WITHOUT request payload</span>\r\n        <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">await</span> client.InvokeMethodAsync&lt;WeatherForecast[]&gt;(httpMethod: HttpMethod.Get, appId: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"serviceB\"</span>, methodName: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"forecast\"</span>);\r\n\r\n        <span style=\"color: rgb(139, 148, 158); font-weight: 400;\">//Response with request payload</span>\r\n        <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">await</span> client.InvokeMethodAsync&lt;<span style=\"color: rgb(255, 166, 87); font-weight: 400;\">int</span>, WeatherForecast[]&gt;(httpMethod: HttpMethod.Post, appId: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"serviceB\"</span>, data: <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">100</span>, methodName: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"forecast\"</span>);\r\n\r\n        <span style=\"color: rgb(139, 148, 158); font-weight: 400;\">//Either response contract will be returned in case of valid HTTP status, or an exception will be raised in above methods</span>\r\n        <span style=\"color: rgb(139, 148, 158); font-weight: 400;\">//Alternative is to use InvokeMethodWithResponseAsync, granular control in case of failure</span>\r\n        HttpRequestMessage request = client.CreateInvokeMethodRequest(appId: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"serviceB\"</span>, methodName: <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"forecast2\"</span>);\r\n\r\n        HttpResponseMessage response = <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">await</span> client.InvokeMethodWithResponseAsync(request);\r\n    }\r\n}</pre>\r\n\r\nThe dapr sidecar will discover the appropriate endpoint to call in ServiceB as long as the relative route path of the endpoint matches with the methodName parameter passed above.\r\n\r\n<pre style=\"font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; \"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">using</span> Dapr.Client;\r\n<span style=\"color: rgb(255, 123, 114); font-weight: 400;\">using</span> Microsoft.AspNetCore.Mvc;\r\n\r\n<span style=\"color: rgb(255, 123, 114); font-weight: 400;\">namespace</span> <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">dapr.serviceB</span>;\r\n\r\n[<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">Route(<span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"/\"</span>)</span>]\r\n<span style=\"color: rgb(201, 209, 217); font-weight: 400;\"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">public</span> <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">class</span> <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">ServiceBController</span>(<span style=\"color: rgb(201, 209, 217); font-weight: 400;\">\r\n    DaprClient client</span>) : ControllerBase</span>\r\n{\r\n    <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">private</span> <span style=\"color: rgb(255, 166, 87); font-weight: 400;\">string</span>[] summaries = <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">new</span>[]\r\n        {\r\n            <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"Freezing\"</span>, <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"Bracing\"</span>, <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"Chilly\"</span>, <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"Cool\"</span>, <span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"Mild\"</span>\r\n        };\r\n\r\n    [<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">HttpGet(<span style=\"color: rgb(165, 214, 255); font-weight: 400;\">\"/forecast2\"</span>)</span>]\r\n    <span style=\"color: rgb(201, 209, 217); font-weight: 400;\"><span style=\"color: rgb(255, 123, 114); font-weight: 400;\">public</span> <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">async</span> Task&lt;IActionResult&gt; <span style=\"color: rgb(210, 168, 255); font-weight: 400;\">GetForecast</span>()</span>\r\n    {\r\n        <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">return</span> Ok(Enumerable.Range(<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">1</span>, <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">5</span>).Select(index =&gt;\r\n        <span style=\"color: rgb(255, 123, 114); font-weight: 400;\">new</span> WeatherForecast\r\n        (\r\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\r\n            Random.Shared.Next(<span style=\"color: rgb(121, 192, 255); font-weight: 400;\">-20</span>, <span style=\"color: rgb(121, 192, 255); font-weight: 400;\">55</span>),\r\n            summaries[Random.Shared.Next(summaries.Length)]\r\n        ))\r\n        .ToArray());\r\n    }\r\n}</pre>\r\n\r\nPlease refer to the official Dapr documentation on how to start using it with different hosting models:\r\n\r\n<a href=\"https://docs.dapr.io/operations/hosting/\">Documentation</a>\r\n\r\n## Conclusion\r\n\r\nDapr is a powerful tool that makes it easier to develop and distribute microservices due to its powerful building blocks. We only demonstrated the service invocation capability of Dapr in this post. In future posts, we will explore other capabilities. A real constraint of Dapr is that not all of its budling block APIs are in a stable version. Depending on your needs, infrastructure, and platform you are hosting your system on, this will dictate which features are production-ready and which are not. Reading the documentation and tracking GitHub issues may save you the trouble of reproducing the same error in your execution environment.\r\n",
                            Title = "Dapr Introduction and Service-to-Service Invocation Part I",
                            Version = new byte[0]
                        });
                });

            modelBuilder.Entity("Domain.Subscribers.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscribers", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

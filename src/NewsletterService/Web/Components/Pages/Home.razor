@page "/"
@inject IMediator Mediator

<PageTitle>Home</PageTitle>

<ul class="intro-logos">
    <li><img src="./Microsoft_.NET_logo.svg" /></li>
    <li><img src="./azure-devops.svg" /></li>
    <li><img src="./Microsoft_Azure.svg" /></li>
</ul>

<h4 class="home-intro">
    Welcome to your go-to source for all things C# and .NET! Our newsletter is designed to keep you up-to-date with the latest features, updates, and best practices in the world of C# and .NET development.
</h4>

<h4 class="home-intro">
    Currently <span id="current-developers">@SubscribersCountResult?.Count</span> developers have choosen to stay updated and receive newsletter notifications with mails. Join today to be one of them!
</h4>

<form id="epost-form" method="post" @onsubmit="Submit" @formname="email-form">
    <AntiforgeryToken />
    <input required type="email" @bind="Email" id="email-input" placeholder="Enter your email...">
    <button id="email-submit" type="submit">
        Submit
        @if (ShowLoading)
        {
            <div class="loader"></div>
        }
    </button>
</form>

@if ((!ShowLoading && SubmitResult.HasValue && ((SubmitResult.Value.IsError && SubmitResult.Value.FirstError.Type == ErrorType.Conflict) || !SubmitResult.Value.IsError)))
{
    <div id="success-email"><h4>You are subscriped to the newsletter!</h4></div>
}

else if (!ShowLoading && SubmitResult.HasValue && SubmitResult.Value.IsError)
{
    <div id="exhausted-email"><h4>Exhausted attempts to subscribe, try again later.</h4></div>
}

@code {
    protected override void OnInitialized()
    {
        Email = string.Empty;
        ShowLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Email = string.Empty;
        ShowLoading = false;
        SubscribersCountResult = await Mediator.Send(new FetchSubscribersCount.Query());
    }

    public string Email { get; set; }
    private bool ShowLoading { get; set; }
    public FetchSubscribersCount.Response? SubscribersCountResult { get; set; }
    public ErrorOr<SubscribeToNewsletter.Response>? SubmitResult { get; set; }


    private async Task Submit()
    {
        ShowLoading = true;
        SubmitResult = await Mediator.Send(new SubscribeToNewsletter.Query(Email));
        ShowLoading = false;
    }
}

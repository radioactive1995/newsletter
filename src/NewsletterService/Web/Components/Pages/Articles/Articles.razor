@page "/articles"
@inject IMediator Mediator

<PageTitle>Articles</PageTitle>

@if (articles.Length == 0)
{
    <p>No articles available.</p>
}

else
{
    <ul class="articles articles-double">
        @foreach (var article in articles)
        {
            <li>
                <a href="/articles/@article.Id">
                    <h4>@article.Title</h4>
                    <!--<img src="./test.jpg" alt="@article.Title" />-->
                </a>
            </li>
        }
    </ul>
    <Pagination CurrentPage="CurrentPage" MaxPage="MaxPage" OnPageChanged="OnPageChanged" />
}

@code {
    public FetchArticles.Response[] articles = Array.Empty<FetchArticles.Response>();
    public int CurrentPage { get; set; }
    public int PageSize => 6;
    public int TotalArticles { get; set; }
    public int MaxPage => (int)Math.Ceiling((double)TotalArticles / PageSize);

    protected override async Task OnInitializedAsync()
    {
        CurrentPage = 1;
        TotalArticles = 0;

        await LoadArticlesAsync();
    }

    public async Task LoadArticlesAsync()
    {
        var response = await Mediator.Send(new FetchArticles.Query(CurrentPage, PageSize));
        articles = response.Value;

        if (response.Value.Length > 0)
        {
            TotalArticles = response.Value[0].ArticlesCount;
        }
    }

    public async Task OnPageChanged(int newPage)
    {
        CurrentPage = newPage;
        await LoadArticlesAsync();
    }
}
